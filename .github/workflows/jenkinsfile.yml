name: CI Pipeline

on:
  push:
    branches:
      - main
      - feature/*
      - release/*

jobs:
  build:
    runs-on: ${{ inputs.runs_on || 'innersource.prod.amr.dind' }}  # Fallback to default if input is empty
    container:
      image: amr-registry.caas.intel.com/one-intel-edge/rrp-devops/oie_ci_testing:latest
      options: --pull always --user root   # Ensure the latest image is pulled
    env:
      GIT_SHORT_URL: ${{ github.repository }}
      PROJECT_NAME: ${{ github.repository }}
      SDLE_UPLOAD_PROJECT_ID: ' ' # Add your SDL project

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker
      uses: docker/setup-buildx-action@v1

    - name: Set up environment variables
      run: echo "authorEmail=$(git --no-pager show -s --format='%ae')" >> $GITHUB_ENV

    - name: Version Check
      run: |
        echo "Check if it's a valid code version"
        /opt/ci/version-check.sh

    - name: Build
      run: |
        echo "Hi, I'm a pipeline, doing build step"
        make build

    - name: License Check
      if: github.event_name == 'pull_request'
      run: |
        echo "License checking the code"
        make license

    - name: Lint
      if: github.event_name == 'pull_request'
      run: |
        echo "Hi, I'm a pipeline, doing lint step"
        make lint

    - name: Test
      if: github.event_name == 'pull_request'
      run: |
        echo "Hi, I'm a pipeline, doing test step"
        make test
        make coverage
      continue-on-error: true
      #To do find a replacement for cobertura in GHA
      #post:
        # success:
        #   run: coverageReport cobertura-coverage.xml

    - name: Version Tag
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feature') || startsWith(github.ref, 'refs/heads/release')
      env:
        USERNAME: ${{ secrets.SYS_OIE_DEVOPS_GITHUB_API_USERNAME }}
        PASSWORD: ${{ secrets.SYS_OIE_DEVOPS_GITHUB_API_PASSWORD }}
      run: |
        netrcPatch
        echo "Generate tag if SemVer"
        /opt/ci/version-tag.sh

    - name: Version dev
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/iaas-') || startsWith(github.ref, 'refs/heads/release-')
      env:
        USERNAME: ${{ secrets.SYS_OIE_DEVOPS_GITHUB_API_USERNAME }}
        PASSWORD: ${{ secrets.SYS_OIE_DEVOPS_GITHUB_API_PASSWORD }}
      run: |
        echo "Start new development cycle if needed"
        /opt/ci/version-dev.sh
    
    # Move this to a GHA
    # - name: Auto approve
    #   if: github.event_name == 'pull_request'
    #   env:
    #     USERNAME: ${{ secrets.SYS_DEVOPS_APPROVE_GITHUB_API_USERNAME }}
    #     PASSWORD: ${{ secrets.SYS_DEVOPS_APPROVE_GITHUB_API_PASSWORD }}
    #   run: autoApproveAndMergePR

    # Move this to GHA
    # - name: Artifact
    #   run: artifactUpload

    - name: Failure Actions
      if: failure()
      run: emailFailure

    - name: Post Actions
      if: always()
      run: |
        echo "Cleaning workspace"
        git clean -fdx
