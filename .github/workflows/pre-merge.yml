---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: Pre-Merge CI Pipeline

on:
  pull_request:
    branches:
      - main
      - release-*
  workflow_dispatch:

env:
  MARKDOWNLINT_CLI_VER: 0.44.0

permissions:
  contents: read

jobs:
  pre-checks:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      filtered_projects: ${{ steps.filter-changes.outputs.filtered_projects }}
      other_changed_projects: ${{ steps.filter-changes.outputs.other_changed_projects }}
    env:
      GITHUB_ACTIONS: true
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: "Verify Branch Name"
        uses: open-edge-platform/orch-ci/verify-branch-name@e4fa54613527cfaad83ba8b625fd845a4ab8409d  # 0.1.53
      - name: "Discover Changed Subfolders"
        id: discover-changes
        uses: open-edge-platform/orch-ci/discover-changed-subfolders@e4fa54613527cfaad83ba8b625fd845a4ab8409d  # 0.1.53
      - name: "Filter Out Unwanted Changed Subfolders"
        id: filter-changes
        env:
          changed_projects: ${{ steps.discover-changes.outputs.changed_projects }}
        run: |
          folders_to_remove='[".github",".reuse","LICENSES",""]'

          filtered_projects=$(echo "$changed_projects" | jq -cr --argjson folders_to_remove "$folders_to_remove" 'map(select(. as $item | $folders_to_remove | index($item) | not))')
          other_changed_projects=$(echo "$changed_projects" | jq -cr --argjson filtered_projects "$filtered_projects" 'map(select(. as $item | $filtered_projects | index($item) | not))')

          echo "filtered_projects=$filtered_projects" >> $GITHUB_OUTPUT
          echo "other_changed_projects=$other_changed_projects" >> $GITHUB_OUTPUT
  pre-merge-root:
    needs: pre-checks
    if: ${{ contains(needs.pre-checks.outputs.other_changed_projects, '.github') || contains(needs.pre-checks.outputs.other_changed_projects, '.reuse') || contains(needs.pre-checks.outputs.other_changed_projects, 'LICENSES') || contains(needs.pre-checks.outputs.other_changed_projects, '""')}}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: '18'
      - run: |
          npm install -g \
          "markdownlint-cli@${{ env.MARKDOWNLINT_CLI_VER }}"
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        id: setup_python
        with:
          python-version: '3.13'
      - name: Restore cached virtualenv
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          key: venv-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('requirements.txt') }}
          path: venv_infra
      - name: Run mdlint
        run: make mdlint
      - name: Run license check
        run: make license
  pre-merge-pipeline:
    permissions:
      contents: read
    needs: pre-checks
    if: ${{ needs.pre-checks.outputs.filtered_projects != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        project_folder: ${{ fromJson(needs.pre-checks.outputs.filtered_projects) }}
    uses: open-edge-platform/orch-ci/.github/workflows/pre-merge.yml@0.1.53
    with:
      run_security_scans: false
      run_version_check: true
      run_dep_version_check: true
      run_freeup_ubuntu_space: true
      run_build: true
      run_lint: true
      run_test: false
      run_validate_clean_folder: false
      run_docker_build: true
      run_artifact: true
      artifacts_path: "standalone-node/shellcheck_report.txt"
      prefix_tag_separator: "/"
      project_folder: ${{ matrix.project_folder }}
      trivy_image_skip:  "postgres:16.4"
      trivy_config_path: ${{ matrix.project_folder }}/trivy.yaml
    secrets:
      NO_AUTH_ECR_PUSH_USERNAME: ${{ secrets.NO_AUTH_ECR_PUSH_USERNAME }}
      NO_AUTH_ECR_PUSH_PASSWD: ${{ secrets.NO_AUTH_ECR_PUSH_PASSWD }}
  final-check:
      runs-on: ubuntu-latest
      permissions:
        contents: read
      if: ${{ always() }}
      needs: [pre-merge-root, pre-merge-pipeline]
      steps:
        - name: Harden the runner (Audit all outbound calls)
          uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
          with:
            egress-policy: audit

        - name: Final Status Check
          env:
            pre_merge_root_pipeline: ${{ needs.pre-merge-root.result }}
            pre_merge_pipeline: ${{ needs.pre-merge-pipeline.result }}
          run: |
            results=("pre_merge_root_pipeline" "pre_merge_pipeline")
            status="OK"
            
            for result in "${results[@]}"; do
              pipeline_result=$(eval echo \$$result)
              echo "${result} result: $pipeline_result"
                if [[ "$pipeline_result" != "success" && "$pipeline_result" != "skipped" ]]; then
                status="KO"
              fi
            done
            
            if [[ "$status" == "OK" ]]; then
              echo "Pre-merge check passed successfully."
            else
              echo "All pre-merge checks failed or were skipped. PR can't get merged"
              exit 1
            fi
